var libs = require("./libs.json"),
	http = require('http'),
	https = require('https'),
	fs = require('fs'),
	url = require('url'),
	winston = require('winston'),
	request = require('request'),
	ProgressBar = require('progress'),
	myLevels = {
		info: 0,
		success: 1,
		warn: 2,
		error: 3
	},
	myColors = {
		info: 'grey',
		success: 'green',
		warn: 'yellow',
		error: 'red'
	},
	con = new winston.Logger({
		transports: [
			new winston.transports.Console({colorize: true})
		],
		levels: myLevels,
		colors: myColors
	}),
	versions = [],
	availableLibs = []


desc('Builds an array of possible semantic versioning strings.')
task('buildSemverArray', [], function () {


	for (var major = 0; major < 1; major++) {
		for (var minor = 0; minor < 2; minor++) {
			for (var patch = 0; patch < 10; patch++) {
				versions.push(major + '.' + minor + '.' + patch)
			}
		}
	}
})


desc('Searches for available libraries.')
task('findLibs', ['buildSemverArray'], function () {


	libs.forEach(function (lib) {

		var folderName = lib.name.toLowerCase().replace(' ', '-'),
			counter = 0

		versions.forEach(function (version, i) {


			var path = lib.file.replace(/\{\{version\}\}/g, version)

			request(
				{
					url: path,
					method: "HEAD",
					followRedirect: false,
					headers: {
						"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36"
					}
				},
				function (error, response, body) {

					if (!error && response) {


						switch (response.statusCode) {

							case 200:
								con.log("success", path + ' is available')

								var destination = "libs/" + folderName + "/" + version

								availableLibs.push({
									url: path,
									folder: destination
								})

								break;
							case 301:
								con.log("warn", path + " redirects to another URL!")

								break;
							case 404:
								//con.log("warn", path + " redirects to another URL!")
								process.stdout.write(path + " does not exist!\r")
								break;
							default:

								con.log("warn", "Error " + response.statusCode + ": " + path)

						}


					}
					else {
						con.log("error", "Probably timeout on " + path)
					}

					counter++

					//console.log(counter, versions.length)

					if (counter == versions.length) {
						process.stdout.write("\r\n")
						console.warn("\n\nLoaded all files of " + lib.name + "\n")
					}

					// TODO: Call saveLibs after all links have been checked
				}
			)
		})
	})

})

desc('Saves available libraries.')
task('save', ['findLibs'], function () {

	con.log("TEST")
	con.log(availableLibs)

	availableLibs.forEach(function (lib) {

		jake.mkdirP(lib.folder)

		request(lib.url).pipe(fs.createWriteStream(lib.folder + "/index.js"))

		con.log("success", "Downloaded: " + lib.url)
	})
})


task('default', ['save'], function () {

})


/*

 libs.forEach(function (lib) {

 if (lib.name == "underscore" || lib.name == "backbone") {

 var folderName = lib.name.toLowerCase().replace(' ', '-')//,
 //fileName = lib.file.substr(lib.file.lastIndexOf("/") + 1),
 //minName = lib.min.substr(lib.file.lastIndexOf("/") + 1)

 jake.mkdirP(folderName)

 con.log("info", "Created folder: " + folderName);


 for (var a = 0; a < 3; a++) {
 for (var b = 0; b < 10; b++) {
 for (var c = 0; c < 10; c++) {

 (function () {

 var version = a + "." + b + "." + c,
 //var version = "1.9.1",
 path = lib.file.replace(/\{\{version\}\}/g, version),
 options = url.parse(path, true),
 protocol = (/https:\/\//i.test(path)) ? "https" : "http"


 options.method = "HEAD"


 if (protocol == "https") {

 var req1 = https.request(options, function (res) {

 if (res.statusCode == 200) {

 con.log("success", res.req.path + ' is available')

 jake.mkdirP(folderName + "/" + version)

 https.get(path, function (res) {
 res.pipe(fs.createWriteStream(folderName + "/" + version + "/index.js"))

 con.log("success", "Downloaded: " + folderName + version)
 })


 } else {

 con.log("warn", "Error " + res.statusCode + ": " + res.req.path)
 }
 })

 req1.on('error', function (e) {
 con.log("error", 'ERROR: ' + e.message)
 })

 req1.end()

 } else {

 var req2 = http.request(options, function (res) {

 if (res.statusCode == 200) {

 con.log("success", res.req.path + ' is available')

 jake.mkdirP(folderName + "/" + version)

 https.get(path, function (res) {
 res.pipe(fs.createWriteStream(folderName + "/" + version + "/index.js"))

 con.log("success", "Downloaded: " + folderName + version)
 })


 } else {

 con.log("warn", "Error " + res.statusCode + ": " + res.req.path)
 }
 })

 req2.on('error', function (e) {
 con.log("error", 'ERROR: ' + e.message)
 })

 req2.end()
 }


 }())
 }
 }
 }
 }

 })
 })*/
